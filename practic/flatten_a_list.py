'''
Существует список, который содержит целые числа или другие вложенные списки, которые могут содержать еще несколько списков и целых чисел, которые затем... вы получаете идею. Вы должны положить все целые значения, в один плоский список. Порядок должен быть такой же как и в первоначальном списке с представлением строки слева направо.

Мы должны скрыть эту программу от Николы, сохранив её маленькой и легкой. Из-за этого, Ваш код должен быть короче, чем 140 символов (с пробелами) .

Входные данные: Вложенный список с целыми числами.

Выходные данные: Одномерный список с целыми числами.

Пример:

flat_list([1, 2, 3]) == [1, 2, 3]
flat_list([1, [2, 2, 2], 4]) == [1, 2, 2, 2, 4]
flat_list([[[2]], [4, [5, 6, [6], 6, 6, 6], 7]]) == [2, 4, 5, 6, 6, 6, 6, 6, 7]
flat_list([-1, [1, [-2], 1], -1]) == [-1, 1, -2, 1, -1]

Как это используется: Эта концепция полезна для разбора и анализа файлов со сложной структурой и она бросает вызов вашей креативности в написании короткого кода.
'''


def flat_list(array):
    res = []
    for el in array:
        res += flat_list(el) if isinstance(el, list) else [el]
    return res


if __name__ == '__main__':

    print("Example:")
    print(flat_list([[[2]], [4, [5, 6, [6], 6, 6, 6], 7]]))

    assert flat_list([1, 2, 3]) == [1, 2, 3], "First"
    assert flat_list([1, [2, 2, 2], 4]) == [1, 2, 2, 2, 4], "Second"
    assert flat_list([[[2]], [4, [5, 6, [6], 6, 6, 6], 7]]) == [
        2, 4, 5, 6, 6, 6, 6, 6, 7], "Third"
    assert flat_list([-1, [1, [-2], 1], -1]) == [-1, 1, -2, 1, -1], "Four"
    print('Done! Check it')
